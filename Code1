import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.Cache;
import org.springframework.cache.CacheManager;
import org.springframework.stereotype.Service;

@Service
public class CacheService {

    @Autowired
    private CacheManager cacheManager;

    public void putDataIntoCache(String cacheName, String key, Object data) {
        Cache cache = cacheManager.getCache(cacheName);
        if (cache != null) {
            cache.getNativeCache().put(key, data);
        }
    }

}


import com.github.benmanes.caffeine.cache.Cache;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.cache.CacheManager;
import org.springframework.cache.caffeine.CaffeineCache;
import org.springframework.cache.caffeine.CaffeineCacheManager;

import java.util.concurrent.TimeUnit;

import static org.mockito.Mockito.*;

public class CacheServiceTest {

    @Mock
    private CacheManager cacheManager;

    @InjectMocks
    private CacheService cacheService;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.openMocks(this);
        
        // Mock the behavior of cacheManager.getCache() to return a mock CaffeineCache
        CaffeineCache caffeineCache = mock(CaffeineCache.class);
        when(cacheManager.getCache("myCache")).thenReturn(caffeineCache);
    }

    @Test
    public void testPutDataIntoCache() {
        // Prepare test data
        String cacheName = "myCache";
        String key = "testKey";
        String data = "testData";

        // Call the method under test
        cacheService.putDataIntoCache(cacheName, key, data);

        // Verify that cacheManager.getCache() was called with the correct cacheName
        verify(cacheManager, times(1)).getCache(cacheName);

        // Verify that caffeineCache.put() was called with the correct key and data
        verify(cacheManager.getCache(cacheName), times(1)).put(key, data);
    }
}



